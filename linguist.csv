"pull_request","number_of_commits","number_of_comments","number_of_reviews","user_type","user_login","merged_at","number_of_additions","number_of_deletions","number_of_files_changed","number_of_days","message"
773,0,2,9,"Internals","probablycorey",2013-09-03,0,0,0,4,"Whenever the active pane item changes, this event will be triggered. 

This is will make things easier in the find and replace package.
"
742,0,0,2,"Internals","probablycorey",2013-08-21,0,0,0,0,"Previously, browser process always loaded files from the application path `/Application/Atom.app`. `aa` would get around this problem by compiling certain coffee files needed by the browser process into the application path.

Now, when atom is run in dev mode all files (excluding main.coffee) are loaded from the resource path. I also added the command line flag -f or --foreground to keep the browser processes in the foreground. This allows us to see the output from the browser process.
"
718,0,1,1,"Internals","probablycorey",2013-08-20,0,0,0,3,":construction:under construction:construction:

Atom's menu bar was sucky. This needed to be fixed because many people use the menu bar to discover application commands. This pull doesn't add many commands to what we already had (although that is easier to do now). This pull does make the menu commands integrate better with Atom.
- [x] Menu items such as Copy/Paste/Undo/Etc... work in Atom/DevTools/Specs
- [x] Keybord shortcuts such as Copy/Paste/Undo/Etc... work in Atom/DevTools/Specs
- [x] Menu items display the keybord shortcuts set in Atom
- [x] When all windows are closed, menu items that require a window are disabled
- [x] When all windows are closed, menu items that act upon the application still work
- [x] ""Download Update"" menu item is added when an update is available
- [x] Application level commands (like `application:run-specs` don't show up in the command pallete
- [ ] Only the first key binding is shown for commands with multiple key bindings (selector scoring is also ignored)
- [ ] Triggering window:toggle-dev-tools outputs annoying messages on the browser processes

```
[0816/143959:ERROR:render_widget_host_impl.cc(2147)] We seem to have a different key type sent from the renderer. (7 vs. 10). Ignoring event.
[0816/143959:ERROR:render_widget_host_impl.cc(2144)] Got a KeyEvent back from the renderer but we don't seem to have sent it to the renderer!
```
"
658,0,0,0,"Internals","benogle",2013-07-24,0,0,0,1,"In other editors, when you have something selected, and you move the cursor left or right, the cursor goes to the respective end of the selection. In atom, it would ignore the selection and just move the cursor irrespective of selection state. 

On cursor up and down, the cursor should go to the line above the selection or to the line below the selection, respectively. This is the way other editors work, including web textareas.

The crappiest thing I added was an options hash to the `move*` functions. There is now a `moveToEndOfSelection` option. The `moveToEndOfSelection` is properly set by the `EditSession`. 
"
655,0,6,6,"Internals","benogle",2013-07-24,0,0,0,2,"Uses markers, so this will have to change when collaboration stuff is out.

Key combos

```
  'meta-f2': 'bookmarks:toggle-bookmark'
  'f2': 'bookmarks:jump-to-next-bookmark'
  'shift-f2': 'bookmarks:jump-to-previous-bookmark'
```

Please give advice. Am I using the right functions from `EditSession`? Am I hooking things in the right way? Should I optimize something?
"
639,0,2,0,"Internals","benogle",2013-07-24,0,0,0,6,"- [x] Fold comments when in `foldAll()`
- [x] Fold all at some indent level
- [x] Clean up fold code a bit
- [x] Think about where to put the tests: `LanguageMode` or `EditSession`?
"
542,0,2,0,"Internals","probablycorey",2013-05-13,0,0,0,5,"Based on this bug #372, auto-indentation isn't something everyone wants. But there are different types of auto-indenting. I've divided them up into three parts **auto-indenting when typing**, **auto-indenting-when-pasting** and **normalizing-pasted-text**
### Auto-indenting when typing
- Pressing 'return' will auto-indent the line following the '\n'
- If a line matches a decrease indent pattern (such as a closing bracket) it will auto-outdent 
- Pressing 'tab' at the in the leading whitespace of a line will auto-indent to the correct position
### Auto-indenting when pasting
- All pasted text will be auto-indented based on the indention level of the proceeding line
### Normalizing pasted text
- When text is copied from Atom, we store the the indentation level of the first line in the metadata. When pasting that text, we use that data to increase or decrease the indentation level of the pasted text.

All three of these will be editor config settings, previously they were coupled together.
"
347,0,8,0,"Externals","aroben",2013-03-05,0,0,0,1,"This PR makes Atom buildable by Constructicon.

Depends on github/constructicon#7.
"
293,0,8,0,"Internals","nathansobo",2013-03-07,0,0,0,14,"Work in progress â€“ Not ready to be merged

The central idea of this pull request is that anybody should be able to add items to panes. Right now, panes, tabs, and other functionality is very hard-coded to the editor use case. But what about opening an image viewer / editor or a markdown preview? Or something else? Our current arrangement falls down.

Now, panes are a much more central part of the view system. Panes have multiple items, and pane items can either be regular views _or_ they can be model objects. When you add a model object as a pane item, that object needs a `getViewClass` method to instruct the pane on how it should be rendered.

So now, instead of editors managing multiple edit sessions, edit sessions will just be added as pane items, and the pane will attach an editor and assign its edit session when it needs to render an edit session item. Any other types of items can follow a similar course.

Everything is ripped apart right now, but that's the goal.
- [x] Extract a pane container view for dealing with pane layout and other pane-spanning behavior
- [x] Make pane-splitting general, so that editor / edit session don't need to know about it
- [x] Rename Pane.currentItem/View to activeItem/View
- [x] Remove pane-splitting code from editor
- [x] Remember which pane was last focused (activePane)
- [x] Handle core:close event on pane
- [x] Revamp tabs to work with panes / pane items instead of editors / edit sessions
- [x] Support reordering items
- [x] Support moving items from one pane to another
- [x] Remove code for dealing with multiple edit sessions on editor
- [x] Make fuzzy finder work without reliance on editors having multiple edit sessions
- [x] Fix fuzzy finder splitting
- [x] Remove getActiveEditor. Root view should speak in terms of panes / items
- [x] Replace edit-session-removed events with their pane-item equivalent
- [x] Set the project path in the model layer when one of its edit sessions is first saved, not in the root view when focus shifts
- [x] Make tabs indicate when something is modified
- [x] Prompt when closing modified pane items
- [x] Handle save / save as on panes instead of editor
- [x] Handle saveAll on pane container
- [x] Move autosave to panes
- [x] Support destroying pane items other than the current
- [x] Support destroying all pane items and closing the pane
- [x] Numeric bindings for tab-switching should work
- [x] eliminate fixturesProject
- [x] Support reopening of most recently closed pane item
- [x] Title is not updating when an untitled file is saved for the first time
- [x] Restore root view serialization specs
- [x] Version the serialized window state and blow it away or migrate it if it gets stale
"
